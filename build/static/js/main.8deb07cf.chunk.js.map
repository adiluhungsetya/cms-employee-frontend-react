{"version":3,"sources":["component/reducers/EmployeeReducer.js","shared/client/Client.js","services/EmployeeService.js","shared/icons/Icon.js","component/employee/EmployeeList.js","component/actions/EmployeeAction.js","component/employee/FormEmployee.js","component/stores/EmployeeStore.js","shared/icons/loader.js","App.js","serviceWorker.js","index.js"],"names":["defaultValue","id","name","gender","idNumber","birthDate","position","code","initialState","form","employees","isLoading","client","axios","create","baseURL","process","api","a","get","employeeList","data","post","response","put","employee","delete","status","positions","Icon","props","iconString","icon","faProps","split","connect","state","dispatch","handleEdit","type","payload","setLoading","fetchComplete","withRouter","useState","open","setOpen","setEmployee","modal","setModal","message","setMessage","toggle","toggleButton","loadData","getAllEmployee","then","useEffect","Card","className","CardHeader","tag","Row","Col","to","Button","color","md","size","offset","Table","striped","hover","responsive","width","colSpan","rows","Spinner","aria-colspan","length","map","index","key","scope","onClick","history","replace","handleEditButton","generateTableRow","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","deleteEmployee","handleInputChange","inputName","inputValue","resetForm","setPositions","successMessage","setSuccessMessage","loadPosition","getAllPosition","style","margin","CardBody","Form","onSubmit","event","preventDefault","date","console","log","editEmployee","addEmployee","FormGroup","row","Label","for","Input","placeholder","value","onChange","target","check","cursor","min","maxLength","disabled","trim","employeeStore","createStore","action","editedForm","find","EmployeeStore","Container","fluid","store","exact","path","component","EmployeeList","FormEmployee","library","add","fas","far","fab","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"0RASMA,EAAe,CACjBC,GAAI,GACJC,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVC,UAAW,GACXC,SAAS,CACLL,GAAI,GACJC,KAAM,GACNK,KAAM,KAIRC,EAAe,CACjBC,KAAK,eAAIT,GACTU,UAAU,GACVC,WAAW,G,oKCnBAC,E,OAJAC,EAAMC,OAAO,CACxBC,QAAUC,0BCDRC,EAAM,Y,4CAEL,4BAAAC,EAAA,sEACwBN,EAAOO,IAAIF,GADnC,cACGG,EADH,yBAEIA,EAAaC,MAFjB,4C,kEAKA,WAA2BZ,GAA3B,eAAAS,EAAA,sEACoBN,EAAOU,KAAKL,EAAIR,GADpC,cACGc,EADH,yBAEIA,EAASF,MAFb,4C,kEAKA,WAA4BZ,GAA5B,eAAAS,EAAA,sEACoBN,EAAOY,IAAIP,EAAIR,GADnC,cACGc,EADH,yBAEIA,EAASF,MAFb,4C,kEAKA,WAA8BI,GAA9B,eAAAP,EAAA,6DACGT,EAAO,CACTR,GAAGwB,GAFJ,SAIoBb,EAAOc,OAAOT,EAAI,CAACI,KAAKZ,IAJ5C,UAKmB,KALnB,OAKSkB,OALT,0CAK+B,GAL/B,iCAMS,GANT,4C,kEAUA,4BAAAT,EAAA,sEACqBN,EAAOO,IAAP,UAAcF,EAAd,cADrB,cACGW,EADH,yBAEIA,EAAUP,MAFd,4C,0CCnBQQ,MAPf,SAAcC,GAAQ,IACLC,EAAuBD,EAA7BE,KAAoBC,EADV,YACmBH,EADnB,UAEXE,EAAOD,EAAWG,MAAM,KAE9B,OAAO,kBAAC,IAAD,eAAiBF,KAAMA,GAAUC,KCqK7BE,mBAZf,SAAyBC,GACrB,OAAO,eAAIA,MAGf,SAA4BC,GACxB,MAAO,CACHC,WAAY,SAACrC,GAAD,OAAQoC,EAAS,CAACE,KCnKlB,EDmKmCC,QAASvC,KACxDwC,WAAY,kBAAMJ,EAAS,CAACE,KCnKhB,KDoKZG,cAAe,SAACF,GAAD,OAAaH,EAAS,CAACE,KCvKvB,EDuK2CC,gBAInDL,CAA4CQ,aAxJ3D,SAAuBb,GAAQ,IAAD,EACHc,oBAAS,GADN,mBACnBC,EADmB,KACdC,EADc,OAEKF,mBAAS,IAFd,mBAEnBnB,EAFmB,KAEVsB,EAFU,OAGDH,oBAAS,GAHR,mBAGnBI,EAHmB,KAGbC,EAHa,OAIGL,mBAAS,IAJZ,mBAInBM,EAJmB,KAIXC,EAJW,KAMpBC,EAAS,WAAKN,GAASD,IACvBQ,EAAe,WAAKJ,GAAUD,IAE9BM,EAAW,WAAM,IACZb,EAA4BX,EAA5BW,WAAWC,EAAiBZ,EAAjBY,cAClBD,IF3BD,WAAP,+BE4BQc,GACKC,MAAK,SAAC9C,GACHgC,EAAchC,OA6E1B,OAzEA+C,qBAAU,WACNH,MACF,IAwEE,kBAACI,EAAA,EAAD,CAAMC,UAAU,UACZ,kBAACC,EAAA,EAAD,CAAYC,IAAI,UACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,SACL,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUP,UAAU,UAAS,kBAAC,EAAD,CAAM3B,KAAK,aAAtD,UAGR,kBAAC+B,EAAA,EAAD,CAAKI,GAAI,CAACC,KAAK,EAAEC,OAAO,IACpB,gDAIZ,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAACC,YAAU,EAACd,UAAU,OACtC,+BACI,4BACI,wBAAIe,MAAM,MAAV,OACA,oCACA,sCACA,yCACA,0CACA,wCACA,wBAAIC,QAAS,EAAGD,MAAM,MAAMf,UAAU,eAAtC,aAGR,+BAtEa,WAAM,IACpBjD,EAAuBoB,EAAvBpB,UAAUC,EAAamB,EAAbnB,UACbiE,EACA,4BACI,4BAAI,kBAACC,EAAA,EAAD,CAASlB,UAAU,cAAcpB,KAAK,OAAOuC,eAAc,EAAGZ,MAAM,WAqChF,OAlCKvD,IACDiE,EACI,4BACI,wBAAID,QAAS,EAAGhB,UAAU,6BAA4B,gCAAQ,uDAItEjD,EAAUqE,OAAO,IAAMpE,IACvBiE,EAAOlE,EAAUsE,KAAI,SAACvD,EAASwD,GAC3B,OACI,wBAAIC,IAAKD,GACL,wBAAIE,MAAM,OAAOF,EAAM,GACvB,4BAAKxD,EAASvB,MACd,4BAAKuB,EAAStB,QACd,4BAAKsB,EAASrB,UACd,4BAAKqB,EAASpB,WACd,4BAAKoB,EAASnB,SAASJ,MACvB,4BACI,kBAAC+D,EAAA,EAAD,CAAQ1B,KAAK,SAAS2B,MAAM,UAAUE,KAAK,KAAKT,UAAU,SAClDyB,QAAS,kBAnDhB,SAACnF,GAAO,IACtBqC,EAA2BR,EAA3BQ,WAAgB+C,GAAWvD,EAAhBrB,KAAgBqB,EAAXuD,SAEvB/C,EAAWrC,GAEXoF,EAAQC,QAAQ,SA8CyBC,CAAiB9D,EAASxB,MAC9C,kBAAC,EAAD,CAAM+B,KAAK,aAFZ,UAIJ,4BACI,kBAACiC,EAAA,EAAD,CAAQ1B,KAAK,SAAS2B,MAAM,SAASE,KAAK,KAAKT,UAAU,SACjDyB,QAAS,WACLrC,EAAYtB,EAASxB,IACrBmD,MAEX,kBAAC,EAAD,CAAMpB,KAAK,cALZ,iBAWb4C,EA+BSY,KAIZ,kBAACC,EAAA,EAAD,CAAOC,OAAQ7C,EAAMO,OAAQA,GACzB,kBAACuC,EAAA,EAAD,CAAavC,OAAQA,GAAQ,kBAAC,EAAD,CAAMpB,KAAK,2BAA2BkC,MAAM,QAAzE,cACA,kBAAC0B,EAAA,EAAD,sEACA,kBAACC,EAAA,EAAD,KACI,kBAAC5B,EAAA,EAAD,CAAQmB,QAhGG,YFhCxB,SAAP,mCEiCQU,CAAerE,GACV+B,MAAK,SAACjC,GACH6B,IACI7B,GACA4B,EAAW,oBACXE,IACAC,MAEAH,EAAW,mBACXE,SAsFqCa,MAAM,UAA3C,OACA,kBAACD,EAAA,EAAD,CAAQmB,QAAShC,EAAQc,MAAM,UAAUP,UAAU,QAAnD,QAGR,kBAAC8B,EAAA,EAAD,CAAOC,OAAQ1C,EAAOI,OAAQC,GAC1B,kBAACuC,EAAA,EAAD,KACK1C,S,6CEqFNf,mBAXf,SAAyBC,GACrB,OAAO,eAAIA,MAGf,SAA4BC,GACxB,MAAO,CACH0D,kBAAoB,SAACC,EAAUC,GAAX,OAAwB5D,EAAS,CAACE,KDzOzC,ECyO2DC,QAAQ,CAACwD,YAAUC,iBAC3FC,UAAY,kBAAI7D,EAAS,CAACE,KDrOf,QCyOJJ,CAA4CQ,aAxN3D,SAAsBb,GAAQ,IAEnBrB,EAA4CqB,EAA5CrB,KAAKsF,EAAuCjE,EAAvCiE,kBAAkBV,EAAqBvD,EAArBuD,QAAQa,EAAapE,EAAboE,UAFb,EAGQtD,mBAAS,IAHjB,mBAGlBhB,EAHkB,KAGRuE,EAHQ,OAIkBvD,mBAAS,CAACM,QAAQ,GAAGL,MAAM,IAJ7C,mBAIlBuD,EAJkB,KAIHC,EAJG,KAMnBC,EAAe,YJClB,WAAP,gCICQC,GACK/C,MAAK,SAAC5B,GACHuE,EAAavE,OAkDzB,OAdA6B,qBAAU,WACN6C,MACF,IAaE,kBAACxC,EAAA,EAAD,CAAK0C,MAAO,CAACC,OAAQ,KACjB,kBAAC1C,EAAA,EAAD,CAAKI,GAAI,CAACC,KAAK,EAAEC,OAAO,IACpB,kBAACX,EAAA,EAAD,CAAMC,UAAU,UACZ,kBAACC,EAAA,EAAD,CAAYC,IAAI,SAASF,UAAU,eAAgBlD,EAAKR,GAA6B,gBAAxB,uBAC7D,kBAACyG,EAAA,EAAD,CAAU/C,UAAU,OAChB,kBAACgD,EAAA,EAAD,CAAMC,SApDD,SAACC,GACtBA,EAAMC,iBAEN,IAAMC,EAAQtG,EAAKJ,UAAU6B,MAAM,KAEnCzB,EAAKH,SAAW,CACZL,GAAIQ,EAAKH,UAEbG,EAAKJ,UAAL,UAAoB0G,EAAK,GAAzB,YAA+BA,EAAK,GAApC,YAA0CA,EAAK,IAC/CC,QAAQC,IAAI,OAAOxG,GAEfA,EAAKR,GJjCV,SAAP,kCIkCYiH,CAAazG,GACR+C,MAAK,WACF0C,IACAG,EAAkB,CACdnD,QAAS,0BACTL,MAAOuD,EAAevD,UJ5CvC,SAAP,kCIgDYsE,CAAY1G,GACP+C,MAAK,WACF0C,IACAG,EAAkB,CACdnD,QAAS,gCACTL,MAAOuD,EAAevD,YA2BlB,kBAACuE,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOnD,GAAI,EAAGoD,IAAI,QAAlB,iBACA,kBAACxD,EAAA,EAAD,CAAKI,GAAI,GACL,kBAACqD,EAAA,EAAD,CACIjF,KAAK,OACLtC,GAAG,OACHC,KAAK,OACLuH,YAAY,cACZC,MAAOjH,EAAKP,KACZyH,SAAW,SAAAd,GAAK,OAAId,EAAkB,OAAOc,EAAMe,OAAOF,YAItE,kBAACN,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOnD,GAAI,EAAGoD,IAAI,UAAlB,UACA,kBAACxD,EAAA,EAAD,CAAKI,GAAI,GACL,kBAACiD,EAAA,EAAD,CAAWS,OAAK,GACZ,kBAACP,EAAA,EAAD,CAAOd,MAAO,CAACsB,OAAQ,YACnB,kBAACN,EAAA,EAAD,CACIhB,MAAO,CAACsB,OAAQ,WAChBvF,KAAK,QACLrC,KAAK,SACLwH,MAAOjH,EAAKN,OAAQwH,SAAW,SAAAd,GAAK,OAAId,EAAkB,SAAS,MACpE,IACH,kBAAC,EAAD,CAAM/D,KAAK,aAPf,WAWR,kBAAC+B,EAAA,EAAD,CAAKI,GAAI,GACL,kBAACiD,EAAA,EAAD,CAAWS,OAAK,GACZ,kBAACP,EAAA,EAAD,CAAOd,MAAO,CAACsB,OAAQ,YACnB,kBAACN,EAAA,EAAD,CACIhB,MAAO,CAACsB,OAAQ,WAChBvF,KAAK,QACLrC,KAAK,SACLwH,MAAOjH,EAAKN,OAAQwH,SAAW,SAAAd,GAAK,OAAId,EAAkB,SAAS,MACpE,IACH,kBAAC,EAAD,CAAM/D,KAAK,cAPf,cAYZ,kBAACoF,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOnD,GAAI,GAAX,aACA,kBAACJ,EAAA,EAAD,KACI,kBAACyD,EAAA,EAAD,CACIjF,KAAK,MACLwF,IAAK,EACLC,UAAW,GACX/H,GAAG,WACHC,KAAK,WACLuH,YAAY,yBACZC,MAAOjH,EAAKL,SACZuH,SAAW,SAAAd,GACP,IAAMa,EAAQb,EAAMe,OAAOF,MAAMpC,QAAQ,UAAU,IACnDS,EAAkB,WAAW2B,QAI7C,kBAACN,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOnD,GAAI,GAAX,cACA,kBAACJ,EAAA,EAAD,CAAKI,GAAI,GACL,kBAACqD,EAAA,EAAD,CACIjF,KAAK,OACLrC,KAAK,YACLD,GAAG,YACHwH,YAAY,aACZC,MAAOjH,EAAKJ,UACZsH,SAAU,SAAAd,GAAK,OAAId,EAAkB,YAAYc,EAAMe,OAAOF,YAI1E,kBAACN,EAAA,EAAD,CAAWC,KAAG,GACV,kBAACC,EAAA,EAAD,CAAOnD,GAAI,GAAX,YACA,kBAACJ,EAAA,EAAD,CAAKI,GAAI,GACL,kBAACqD,EAAA,EAAD,CACIjF,KAAK,SACLtC,GAAG,WACHC,KAAK,WACLwH,MAAOjH,EAAKH,SAASL,GACrB0H,SAAW,SAAAd,GAAK,OAAId,EAAkB,WAAWc,EAAMe,OAAOF,SAE9D,qDAEI9F,EAAUoD,KAAI,SAAC1E,EAAS2E,GACpB,OACI,4BACIC,IAAKD,EACLyC,MAAOpH,EAASL,IAClBK,EAASJ,YAOnC,kBAACkH,EAAA,EAAD,CAAWzD,UAAU,OAAO0D,KAAG,GAC3B,kBAACtD,EAAA,EAAD,CAAKI,GAAI,CAACE,OAAO,GAAIV,UAAU,QAC3B,kBAACM,EAAA,EAAD,CACI1B,KAAK,SACL2B,MAAM,UACNP,UAAU,SACVsE,WAtHxBxH,EAAKP,KAAKgI,OAAOnD,OAAO,GAAKtE,EAAKJ,WAA4B,MAAfI,EAAKN,QACrCM,EAAKL,SAAS8H,OAAOnD,OAAO,GAAKtE,EAAKH,SAASyE,OAAO,IAsHhD,kBAAC,EAAD,CAAM/C,KAAK,qBALZ,cAOJ,kBAAC+B,EAAA,EAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,KACL,kBAACC,EAAA,EAAD,CACI1B,KAAK,SACLoB,UAAU,SACVyB,QAASc,EACTM,MAAO,CAACsB,OAAQ,YACnB,kBAAC,EAAD,CAAM9F,KAAK,mBALZ,iBAa5B,kBAACyD,EAAA,EAAD,CAAOC,OAAQU,EAAevD,KAAMO,OApIzB,WACfiD,EAAkB,CAACnD,QAASkD,EAAelD,QAAQL,MAAOuD,EAAevD,OACzEwC,EAAQC,QAAQ,OAmIR,kBAACM,EAAA,EAAD,KACI,kBAAC9B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKI,GAAI,GACL,4BACKiC,EAAelD,UAGxB,kBAACa,EAAA,EAAD,CAAKI,GAAI,CAACE,OAAO,GAAIV,UAAU,QAC3B,kBAAC,EAAD,CAAM3B,KAAK,mBAAmBkC,MAAM,QAAQE,KAAK,gBCjNvE+D,EAAgBC,aPmBP,WAAwD,IAA9BhG,EAA6B,uDAArB5B,EAAa6H,EAAQ,uCAC3D9F,EAAgB8F,EAAhB9F,KAAKC,EAAW6F,EAAX7F,QACZ,OAAQD,GACJ,KK3BY,EL4BR,OAAO,2BAAIH,GAAX,IAAkBzB,WAAW,IACjC,KKjCa,ELkCT,IAAMF,EAAI,eAAO2B,EAAM3B,MAChBuF,EAAwBxD,EAAxBwD,UAAUC,EAAczD,EAAdyD,WAGjB,OAFAe,QAAQC,IAAIjB,EAAU,IAAIC,GAC1BxF,EAAKuF,GAA2B,aAAfC,EAA4B,CAAChG,GAAKgG,GAAcA,EAC1D,2BAAI7D,GAAX,IAAiB3B,KAAMA,IAC3B,KKpCY,ELqCR,IAAM6H,EAAalG,EAAM1B,UAAU6H,MAAK,SAAC9G,GAAD,OAAcA,EAASxB,KAAOuC,KAChEuE,EAAOuB,EAAWjI,UAAU6B,MAAM,KAIxC,OAFAoG,EAAWjI,UAAX,UAA0B0G,EAAK,GAA/B,YAAqCA,EAAK,GAA1C,YAAgDA,EAAK,IAE9C,2BAAI3E,GAAX,IAAiB3B,KAAM6H,IAC3B,KK5CgB,EL6CZ,OAAO,2BAAIlG,GAAX,IAAiB3B,KAAK,eAAKD,GAAcG,WAAW,IACxD,KK/Ce,ELgDX,OAAO,2BAAIyB,GAAX,IAAiBzB,WAAW,EAAOD,UAAU,YAAK8B,KACtD,KK7CW,EL8CP,OAAO,2BAAIJ,GAAX,IAAiB3B,KAAK,eAAKT,KAC/B,QACI,OAAO,eAAIoC,OO1CR,SAASoG,IAEpB,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,IAAD,CAAUC,MAAOR,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWE,O,qCCZ/CC,IAAQC,IAAIC,IAAIC,IAAIC,MCWTC,OAVf,WACE,OACI,6BACI,kBAAC,IAAD,KACI,kBAACd,EAAD,S,YCCMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3G,MAAK,SAAA4G,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMrH,c","file":"static/js/main.8deb07cf.chunk.js","sourcesContent":["import {\r\n    FETCH_COMPLETE,\r\n    HANDLE_DELETE,\r\n    HANDLE_EDIT,\r\n    HANDLE_INPUT, RESET_FORM,\r\n    SET_LOADING,\r\n    SUBMIT_COMPLETE\r\n} from \"../actions/EmployeeAction\";\r\n\r\nconst defaultValue = {\r\n    id: \"\",\r\n    name: \"\",\r\n    gender: \"\",\r\n    idNumber: \"\",\r\n    birthDate: \"\",\r\n    position:{\r\n        id: \"\",\r\n        name: \"\",\r\n        code: \"\"\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    form:{...defaultValue},\r\n    employees:[],\r\n    isLoading: false\r\n}\r\n\r\nexport default function EmployeeReducer (state = initialState,action) {\r\n    const {type,payload} = action\r\n    switch (type) {\r\n        case SET_LOADING:\r\n            return {...state, isLoading: true}\r\n        case HANDLE_INPUT:\r\n            const form = {...state.form}\r\n            const {inputName,inputValue} = payload\r\n            console.log(inputName,\" \",inputValue)\r\n            form[inputName]= inputValue === \"position\" ? {id : inputValue} : inputValue\r\n            return {...state,form: form}\r\n        case HANDLE_EDIT:\r\n            const editedForm = state.employees.find((employee) => employee.id === payload)\r\n            const date = editedForm.birthDate.split(\"-\")\r\n\r\n            editedForm.birthDate = `${date[2]}-${date[1]}-${date[0]}`\r\n\r\n            return {...state,form: editedForm}\r\n        case SUBMIT_COMPLETE:\r\n            return {...state,form: {...initialState},isLoading: false}\r\n        case FETCH_COMPLETE:\r\n            return {...state,isLoading: false, employees: [...payload]}\r\n        case RESET_FORM:\r\n            return {...state,form: {...defaultValue}}\r\n        default:\r\n            return {...state}\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nconst client = axios.create({\r\n    baseURL : process.env.REACT_APP_API_BASE_URL\r\n})\r\n\r\nexport default client","import client from \"../shared/client/Client\";\r\n\r\nconst api = \"/employee\"\r\n\r\nexport async function getAllEmployee() {\r\n    const employeeList = await client.get(api)\r\n    return employeeList.data\r\n}\r\n\r\nexport async function addEmployee(form) {\r\n    const response = await client.post(api,form)\r\n    return response.data\r\n}\r\n\r\nexport async function editEmployee(form) {\r\n    const response = await client.put(api,form)\r\n    return response.data\r\n}\r\n\r\nexport async function deleteEmployee(employee) {\r\n    const form = {\r\n        id:employee\r\n    }\r\n    const response = await client.delete(api,{data:form})\r\n    if(response.status == 200) return true\r\n    else return false\r\n\r\n}\r\n\r\nexport async function getAllPosition() {\r\n    const positions = await client.get(`${api}/position`)\r\n    return positions.data\r\n}","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction Icon(props) {\r\n    const {icon: iconString,...faProps}=props\r\n    const icon = iconString.split(\" \")\r\n\r\n    return <FontAwesomeIcon icon={icon} {...faProps}/>\r\n}\r\n\r\nexport default Icon","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    Col,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Row,\r\n    Spinner,\r\n    Table\r\n} from \"reactstrap\";\r\nimport {FETCH_COMPLETE, HANDLE_DELETE, HANDLE_EDIT, SET_LOADING} from \"../actions/EmployeeAction\";\r\nimport {connect} from \"react-redux\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {deleteEmployee, getAllEmployee} from \"../../services/EmployeeService\";\r\nimport Icon from \"../../shared/icons/Icon\";\r\n\r\nfunction EmployeeList (props) {\r\n    const [open,setOpen] = useState(false)\r\n    const [employee,setEmployee] = useState(\"\")\r\n    const [modal,setModal] = useState(false)\r\n    const [message,setMessage] = useState(\"\")\r\n\r\n    const toggle = ()=>{setOpen(!open)}\r\n    const toggleButton = ()=>{setModal(!modal)}\r\n\r\n    const loadData = () =>{\r\n        const {setLoading,fetchComplete} = props\r\n        setLoading();\r\n        getAllEmployee()\r\n            .then((employees)=>{\r\n                fetchComplete(employees)\r\n            })\r\n    }\r\n\r\n    useEffect(()=>{\r\n        loadData()\r\n    },[])\r\n\r\n    const handleEditButton = (id) =>{\r\n        const {handleEdit,form,history} = props\r\n\r\n        handleEdit(id)\r\n\r\n        history.replace(\"/form\")\r\n\r\n    }\r\n\r\n    const handleDeleteButton = () =>{\r\n        deleteEmployee(employee)\r\n            .then((response)=>{\r\n                toggle()\r\n                if (response){\r\n                    setMessage(\"Delete success !\")\r\n                    toggleButton()\r\n                    loadData()\r\n                } else {\r\n                    setMessage(\"Delete failed !\")\r\n                    toggleButton()\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    const generateTableRow = () =>{\r\n        const {employees,isLoading} = props\r\n        let rows = (\r\n            <tr>\r\n                <td><Spinner className=\"text-center\" type=\"grow\" aria-colspan={6} color=\"info\"/></td>\r\n            </tr>\r\n        )\r\n        if (!isLoading){\r\n            rows=(\r\n                <tr>\r\n                    <td colSpan={8} className=\"table-warning text-center\"><strong><em>No Employee(s) yet.</em></strong></td>\r\n                </tr>\r\n            )\r\n        }\r\n        if (employees.length>0 && !isLoading){\r\n            rows = employees.map((employee,index)=>{\r\n                return(\r\n                    <tr key={index}>\r\n                        <th scope=\"row\">{index+1}</th>\r\n                        <td>{employee.name}</td>\r\n                        <td>{employee.gender}</td>\r\n                        <td>{employee.idNumber}</td>\r\n                        <td>{employee.birthDate}</td>\r\n                        <td>{employee.position.name}</td>\r\n                        <td>\r\n                            <Button type=\"button\" color=\"warning\" size=\"sm\" className=\"shadow\"\r\n                                    onClick={()=>handleEditButton(employee.id)}\r\n                            ><Icon icon=\"fas edit\"></Icon> Edit</Button>\r\n                        </td>\r\n                        <td>\r\n                            <Button type=\"button\" color=\"danger\" size=\"sm\" className=\"shadow\"\r\n                                    onClick={()=>{\r\n                                        setEmployee(employee.id)\r\n                                        toggle()\r\n                                    }}\r\n                            ><Icon icon=\"fas trash\"></Icon> Delete</Button>\r\n                        </td>\r\n                    </tr>\r\n                )\r\n            })\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    return (\r\n        <Card className=\"shadow\">\r\n            <CardHeader tag=\"strong\">\r\n                <Row>\r\n                    <Col >\r\n                        <Link to=\"/form\">\r\n                            <Button color=\"primary\" className=\"shadow\"><Icon icon=\"fas plus\"></Icon> Add</Button>\r\n                        </Link>\r\n                    </Col>\r\n                    <Col md={{size:7,offset:2}}>\r\n                        <h3>Employee List</h3>\r\n                    </Col>\r\n                </Row>\r\n            </CardHeader>\r\n            <Table striped hover responsive className=\"m-0\">\r\n                <thead>\r\n                    <tr>\r\n                        <th width=\"5%\">No.</th>\r\n                        <th>Name</th>\r\n                        <th>Gender</th>\r\n                        <th>Id Number</th>\r\n                        <th>Birth Date</th>\r\n                        <th>Position</th>\r\n                        <th colSpan={2} width=\"15%\" className=\"text-center\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        generateTableRow()\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n            <Modal isOpen={open} toggle={toggle}>\r\n                <ModalHeader toggle={toggle}><Icon icon=\"fas exclamation-triangle\" color=\"red\"/> Warning !</ModalHeader>\r\n                <ModalBody>Employee will permanently deleted, Are you sure to continue ?</ModalBody>\r\n                <ModalFooter>\r\n                    <Button onClick={handleDeleteButton} color=\"danger\">Yes</Button>\r\n                    <Button onClick={toggle} color=\"primary\" className=\"ml-2\">No</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n            <Modal isOpen={modal} toggle={toggleButton}>\r\n                <ModalBody>\r\n                    {message}\r\n                </ModalBody>\r\n            </Modal>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {...state}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        handleEdit: (id) => dispatch({type:HANDLE_EDIT,payload: id}),\r\n        setLoading: () => dispatch({type:SET_LOADING}),\r\n        fetchComplete: (payload) => dispatch({type:FETCH_COMPLETE,payload})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(EmployeeList))","const HANDLE_INPUT = 0\r\nconst FETCH_COMPLETE = 1\r\nconst SUBMIT_COMPLETE = 2\r\nconst HANDLE_EDIT = 3\r\nconst SET_LOADING = 5\r\nconst RESET_FORM = 6\r\n\r\nexport {FETCH_COMPLETE,HANDLE_EDIT,HANDLE_INPUT,RESET_FORM,SET_LOADING,SUBMIT_COMPLETE}","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardHeader,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    Row\r\n} from \"reactstrap\";\r\nimport {HANDLE_INPUT, RESET_FORM} from \"../actions/EmployeeAction\";\r\nimport {connect} from \"react-redux\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {addEmployee, editEmployee, getAllPosition} from \"../../services/EmployeeService\";\r\nimport DatePicker from \"react-datepicker\"\r\nimport Icon from \"../../shared/icons/Icon\";\r\n\r\nfunction FormEmployee(props) {\r\n\r\n    const {form,handleInputChange,history,resetForm} = props\r\n    const [positions,setPositions] = useState([])\r\n    const [successMessage,setSuccessMessage] = useState({message:\"\",open: false})\r\n\r\n    const loadPosition = ()=>{\r\n\r\n        getAllPosition()\r\n            .then((positions)=>{\r\n                setPositions(positions)\r\n            })\r\n    }\r\n\r\n    const handleFormSubmit = (event)=>{\r\n        event.preventDefault()\r\n\r\n        const date  = form.birthDate.split(\"-\")\r\n\r\n        form.position = {\r\n            id: form.position\r\n        }\r\n        form.birthDate = `${date[2]}-${date[1]}-${date[0]}`\r\n        console.log(\"FORM\",form)\r\n\r\n        if (form.id){\r\n            editEmployee(form)\r\n                .then(()=>{\r\n                    resetForm()\r\n                    setSuccessMessage({\r\n                        message: \"Edit employee success!!\",\r\n                        open: !successMessage.open\r\n                    })\r\n                })\r\n        } else {\r\n            addEmployee(form)\r\n                .then(()=>{\r\n                    resetForm()\r\n                    setSuccessMessage({\r\n                        message: \"Insert new employee success!!\",\r\n                        open: !successMessage.open\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        loadPosition()\r\n    },[])\r\n\r\n    const isValidForm = ()=>{\r\n        return (form.name.trim().length>0 && form.birthDate && form.gender != null\r\n                            && form.idNumber.trim().length>0 && form.position.length>0)\r\n    }\r\n\r\n    const toggleForm = ()=>{\r\n        setSuccessMessage({message: successMessage.message,open: !successMessage.open});\r\n        history.replace(\"/\")\r\n    }\r\n\r\n    return(\r\n        <Row style={{margin: 20}}>\r\n            <Col md={{size:6,offset:3}}>\r\n                <Card className=\"shadow\">\r\n                    <CardHeader tag=\"strong\" className=\"text-center\">{!form.id ? \"Insert New Employee\" : \"Edit employee\"}</CardHeader>\r\n                    <CardBody className=\"p-3\">\r\n                        <Form onSubmit={handleFormSubmit}>\r\n                            <FormGroup row>\r\n                                <Label md={3} for=\"name\">Employee Name</Label>\r\n                                <Col md={9}>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        placeholder=\"Insert name\"\r\n                                        value={form.name}\r\n                                        onChange={(event => handleInputChange(\"name\",event.target.value))}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label md={3} for=\"gender\">Gender</Label>\r\n                                <Col md={3}>\r\n                                    <FormGroup check>\r\n                                        <Label style={{cursor: \"pointer\"}}>\r\n                                            <Input\r\n                                                style={{cursor: \"pointer\"}}\r\n                                                type=\"radio\"\r\n                                                name=\"gender\"\r\n                                                value={form.gender} onChange={(event => handleInputChange(\"gender\",0))}\r\n                                            />{' '}\r\n                                            <Icon icon=\"fas mars\"></Icon> Male\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                                <Col md={4}>\r\n                                    <FormGroup check>\r\n                                        <Label style={{cursor: \"pointer\"}}>\r\n                                            <Input\r\n                                                style={{cursor: \"pointer\"}}\r\n                                                type=\"radio\"\r\n                                                name=\"gender\"\r\n                                                value={form.gender} onChange={(event => handleInputChange(\"gender\",1))}\r\n                                            />{' '}\r\n                                            <Icon icon=\"fas venus\"></Icon> Female\r\n                                        </Label>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label md={3}>Id Number</Label>\r\n                                <Col>\r\n                                    <Input\r\n                                        type=\"tel\"\r\n                                        min={0}\r\n                                        maxLength={16}\r\n                                        id=\"idNumber\"\r\n                                        name=\"idNumber\"\r\n                                        placeholder=\"Insert identity number\"\r\n                                        value={form.idNumber}\r\n                                        onChange={(event => {\r\n                                            const value = event.target.value.replace(/[^0-9]/g,\"\")\r\n                                            handleInputChange(\"idNumber\",value)\r\n                                    })}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label md={3}>Birth Date</Label>\r\n                                <Col md={4}>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        name=\"birthDate\"\r\n                                        id=\"birthDate\"\r\n                                        placeholder=\"dd/MM/yyyy\"\r\n                                        value={form.birthDate}\r\n                                        onChange={event => handleInputChange(\"birthDate\",event.target.value)}\r\n                                    />\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label md={3}>Position</Label>\r\n                                <Col md={6}>\r\n                                    <Input\r\n                                        type=\"select\"\r\n                                        id=\"position\"\r\n                                        name=\"position\"\r\n                                        value={form.position.id}\r\n                                        onChange={(event => handleInputChange(\"position\",event.target.value))}\r\n                                    >\r\n                                        <option>-Select position-</option>\r\n                                        {\r\n                                            positions.map((position,index)=>{\r\n                                                return(\r\n                                                    <option\r\n                                                        key={index}\r\n                                                        value={position.id}\r\n                                                    >{position.name}</option>\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup className=\"mt-5\" row>\r\n                                <Col md={{offset:7}} className=\"mr-2\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        color=\"primary\"\r\n                                        className=\"shadow\"\r\n                                        disabled={!isValidForm()}\r\n                                    ><Icon icon=\"fas check-square\"></Icon> Confirm </Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Link to=\"/\">\r\n                                        <Button\r\n                                            type=\"button\"\r\n                                            className=\"shadow\"\r\n                                            onClick={resetForm}\r\n                                            style={{cursor: \"pointer\"}}\r\n                                        ><Icon icon=\"fas arrow-left\"></Icon> Back </Button>\r\n                                    </Link>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </CardBody>\r\n                </Card>\r\n            </Col>\r\n            <Modal isOpen={successMessage.open} toggle={toggleForm}>\r\n                <ModalBody>\r\n                    <Row>\r\n                        <Col md={9}>\r\n                            <h4>\r\n                                {successMessage.message}\r\n                            </h4>\r\n                        </Col>\r\n                        <Col md={{offset:1}} className=\"ml-5\">\r\n                            <Icon icon=\"far check-circle\" color=\"green\" size=\"2x\"/>\r\n                        </Col>\r\n                    </Row>\r\n                </ModalBody>\r\n            </Modal>\r\n        </Row>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {...state}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        handleInputChange : (inputName,inputValue)=>dispatch({type:HANDLE_INPUT,payload:{inputName,inputValue}}),\r\n        resetForm : ()=>dispatch({type:RESET_FORM})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withRouter(FormEmployee))","import React from \"react\";\r\nimport {createStore} from \"redux\";\r\nimport EmployeeReducer from \"../reducers/EmployeeReducer\";\r\nimport {Provider} from \"react-redux\";\r\nimport {Container} from \"reactstrap\";\r\nimport {Route,Switch} from \"react-router-dom\";\r\nimport EmployeeList from \"../employee/EmployeeList\";\r\nimport FormEmployee from \"../employee/FormEmployee\";\r\n\r\nconst employeeStore = createStore(EmployeeReducer)\r\n\r\nexport default function EmployeeStore () {\r\n\r\n    return(\r\n        <Container fluid>\r\n            <Provider store={employeeStore}>\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={EmployeeList}/>\r\n                    <Route path=\"/form\" component={FormEmployee}/>\r\n                </Switch>\r\n            </Provider>\r\n        </Container>\r\n\r\n)\r\n}\r\n","import {library} from \"@fortawesome/fontawesome-svg-core\";\r\nimport {fas} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {far} from \"@fortawesome/free-regular-svg-icons\";\r\nimport {fab} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\nexport default function loadIcon() {\r\n    library.add(fas,far,fab)\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport EmployeeStore from \"./component/stores/EmployeeStore\";\r\nimport loadIcon from \"./shared/icons/loader\";\r\n\r\nloadIcon()\r\nfunction App() {\r\n  return (\r\n      <div>\r\n          <BrowserRouter>\r\n              <EmployeeStore/>\r\n          </BrowserRouter>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}